============================= test session starts ==============================
platform linux -- Python 3.8.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /home/ddd/Dev/api_yamdb/venv/bin/python3
django: settings: api_yamdb.settings (from ini)
rootdir: /home/ddd/Dev/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 77 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] FAILED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] FAILED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] FAILED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] FAILED [ 14%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] FAILED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 19%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 29%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests FAILED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser FAILED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed FAILED [ 44%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 48%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get FAILED       [ 50%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed FAILED [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch FAILED  [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] FAILED [ 54%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] FAILED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] FAILED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] FAILED [ 58%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] FAILED [ 59%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed FAILED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user FAILED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] FAILED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] FAILED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] FAILED [ 67%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin FAILED [ 68%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin FAILED [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] FAILED [ 74%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] FAILED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] FAILED [ 76%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete FAILED     [ 77%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission FAILED [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation FAILED [ 84%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission FAILED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post FAILED     [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get FAILED [ 89%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user FAILED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get FAILED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete FAILED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth FAILED [100%]

=================================== FAILURES ===================================
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data2-messege2] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e649d30>
client = <django.test.client.Client object at 0x7fbe7e6143a0>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\z',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_username_and_email_fields
    )
    def test_00_singup_length_and_simbols_validation(self, client,
                                                     data, messege,
                                                     django_user_model):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = client.post(self.url_signup, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_signup, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/auth/signup/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\z
E       assert 200 == <HTTPStatus.BAD_REQUEST: 400>
E         +200
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:94: AssertionError
_________ Test00UserRegistration.test_00_valid_data_admin_create_user __________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e614c40>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e5c7ac0>
django_user_model = <class 'users.models.ReviewUser'>

    def test_00_valid_data_admin_create_user(self,
                                             admin_client,
                                             django_user_model):
        outbox_before_count = len(mail.outbox)
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
        response = admin_client.post(
            self.url_admin_create_user, data=valid_data
        )
        outbox_after = mail.outbox
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.url_admin_create_user}` не найден. Проверьте '
            'настройки в *urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос от имени администратора к эндпоинту '
            f'`{self.url_admin_create_user}` содержит корректные данные - '
            'должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос от имени администратора к эндпоинту `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 403 == <HTTPStatus.CREATED: 201>
E         +403
E         -<HTTPStatus.CREATED: 201>

tests/test_00_user_registration.py:169: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data0-messege0] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e634d60>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e593580>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.url_admin_create_user, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_admin_create_user, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:209: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data1-messege1] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e593ca0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e6171c0>
data = {'email': 'valid-email@yamdb.fake', 'username': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.url_admin_create_user, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_admin_create_user, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:209: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data2-messege2] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e68e820>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e3eef10>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\z',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.url_admin_create_user, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_admin_create_user, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\z
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:209: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data3-messege3] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e68ee80>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e5aac10>
data = {'email': 'valid-email@yamdb.fake', 'first_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.url_admin_create_user, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_admin_create_user, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:209: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data4-messege4] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e5d2550>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e614a90>
data = {'email': 'valid-email@yamdb.fake', 'last_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.url_admin_create_user, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.url_admin_create_user, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:209: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
______ Test00UserRegistration.test_00_registration_same_email_restricted _______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e70d9d0>
client = <django.test.client.Client object at 0x7fbe7e6ba280>

    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что POST-запрос к `{self.url_signup}` с корректными '
            'возвращает статус-код 200.'
        )
    
        duplicate_email_data = {
            'email': valid_email_1,
            'username': valid_username_2
        }
        assert_msg = (
            f'Если POST-запрос, отправленный на эндпоинт `{self.url_signup}`, '
            'содержит `email` зарегистрированного пользователя и незанятый '
            '`username` - должен вернуться ответ со статусом 400.'
        )
        try:
            response = client.post(self.url_signup, data=duplicate_email_data)
        except IntegrityError:
            raise AssertionError(assert_msg)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (assert_msg)
E       AssertionError: Если POST-запрос, отправленный на эндпоинт `/api/v1/auth/signup/`, содержит `email` зарегистрированного пользователя и незанятый `username` - должен вернуться ответ со статусом 400.
E       assert 200 == <HTTPStatus.BAD_REQUEST: 400>
E         +200
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_00_user_registration.py:316: AssertionError
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ____

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e65cac0>
client = <django.test.client.Client object at 0x7fbe7e6b46a0>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.url_signup, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.url_signup}`, возвращает ответ со статусом '
            '200.'
        )
    
        response = client.post(self.url_signup, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что повторный POST-запрос к `{self.url_signup}` с '
            'данными зарегистрированного пользователя возвращает ответ со '
            'статусом 200.'
        )
E       AssertionError: Проверьте, что повторный POST-запрос к `/api/v1/auth/signup/` с данными зарегистрированного пользователя возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests/test_00_user_registration.py:349: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin __

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x7fbe7e6f45e0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e6b4ee0>
client = <django.test.client.Client object at 0x7fbe7e60de80>
django_user_model = <class 'users.models.ReviewUser'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.url_admin_create_user, data=valid_data)
>       assert (user_cnt + 1) == django_user_model.objects.count(), (
            'Если POST-запрос администратора на эндпоинт '
            f'`{self.url_admin_create_user}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
E       AssertionError: Если POST-запрос администратора на эндпоинт `/api/v1/users/` содержит корректные данные - должен быть создан новый пользователь.
E       assert 2 == 1
E         +2
E         -1

tests/test_00_user_registration.py:364: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_01_users_not_authenticated _________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e74db80>
client = <django.test.client.Client object at 0x7fbe7e3adb80>

    def test_01_users_not_authenticated(self, client):
        response = client.get('/api/v1/users/')
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в '
            '*urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            'Проверьте, что GET-запрос к `/api/v1/users/` без токена '
            'авторизации возвращается ответ со статусом 401.'
        )
E       AssertionError: Проверьте, что GET-запрос к `/api/v1/users/` без токена авторизации возвращается ответ со статусом 401.
E       assert 403 == <HTTPStatus.UNAUTHORIZED: 401>
E         +403
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests/test_01_users.py:43: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
____________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e5578b0>
client = <django.test.client.Client object at 0x7fbe7e67d6d0>
admin = <ReviewUser: TestAdmin>

    def test_02_users_username_not_authenticated(self, client, admin):
        response = client.get(f'/api/v1/users/{admin.username}/')
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/{username}/` не найден. Проверьте '
            'настройки в *urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            'Проверьте, что GET-запрос `/api/v1/users/{username}/` без '
            'токена авторизации возвращает ответ со статусом 401.'
        )
E       AssertionError: Проверьте, что GET-запрос `/api/v1/users/{username}/` без токена авторизации возвращает ответ со статусом 401.
E       assert 403 == <HTTPStatus.UNAUTHORIZED: 401>
E         +403
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests/test_01_users.py:56: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestAdmin/
_______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e59f3a0>
client = <django.test.client.Client object at 0x7fbe7e5c37f0>

    def test_03_users_me_not_authenticated(self, client):
        response = client.get('/api/v1/users/me/')
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/me/` не найден. Проверьте настройки '
            'в *urls.py*.'
        )
    
>       assert response.status_code == HTTPStatus.UNAUTHORIZED, (
            'Проверьте, что GET-запрос `/api/v1/users/me/` без токена '
            'авторизации возвращает ответ со статусом 401.'
        )
E       AssertionError: Проверьте, что GET-запрос `/api/v1/users/me/` без токена авторизации возвращает ответ со статусом 401.
E       assert 403 == <HTTPStatus.UNAUTHORIZED: 401>
E         +403
E         -<HTTPStatus.UNAUTHORIZED: 401>

tests/test_01_users.py:69: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____________________ Test01UserAPI.test_04_users_get_admin _____________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e5e7550>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e593640>
admin = <ReviewUser: TestAdmin>

    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в '
            '*urls.py*.'
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос к `/api/v1/users/` с токеном '
            'авторизации возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос к `/api/v1/users/` с токеном авторизации возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests/test_01_users.py:80: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e687130>
user = <ReviewUser: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2e5280>
admin = <ReviewUser: TestAdmin>
django_user_model = <class 'users.models.ReviewUser'>

    def test_04_02_users_get_search(self, user, admin_client,
                                    admin, django_user_model):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/?search={username}` не найден. '
            'Проверьте настройки в *urls.py*.'
        )
        reponse_json = response.json()
>       assert ('results' in reponse_json
                and isinstance(reponse_json.get('results'), list)), (
            'Проверьте, что GET-запрос к `/api/v1/users/?search={username}` '
            'возвращает результаты поиска по значению ключа `results` в виде '
            'списка.'
        )
E       AssertionError: Проверьте, что GET-запрос к `/api/v1/users/?search={username}` возвращает результаты поиска по значению ключа `results` в виде списка.
E       assert ('results' in {'detail': 'Authentication credentials were not provided.'})

tests/test_01_users.py:105: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
____________ Test01UserAPI.test_05_01_users_post_admin_bad_requests ____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e634370>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e258340>
admin = <ReviewUser: TestAdmin>

    def test_05_01_users_post_admin_bad_requests(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если POST-запрос администратора к `/api/v1/users/` '
            'не содержит необходимых данных - должен вернуться ответ со '
            'статусом 400.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` не содержит необходимых данных - должен вернуться ответ со статусом 400.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:151: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_______ Test01UserAPI.test_05_02_users_post_admin_user_creation[data0-] ________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e634160>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2edc10>
data = {'email': 'testuser2@yamdb.fake', 'role': 'user', 'username': 'TestUser_2'}
msg_modifier = '', django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 403 == <HTTPStatus.CREATED: 201>
E         +403
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:206: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
_ Test01UserAPI.test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] _

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e5f5e50>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e21a9a0>
data = {'email': 'testuser3@yamdb.fake', 'username': 'TestUser_3'}
msg_modifier = 'без указания роли нового пользователя '
django_user_model = <class 'users.models.ReviewUser'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные без указания роли нового пользователя - должен вернуться ответ со статусом 201.
E       assert 403 == <HTTPStatus.CREATED: 201>
E         +403
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:206: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
____________ Test01UserAPI.test_05_03_users_post_response_has_data _____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e21a460>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2504c0>

    def test_05_03_users_post_response_has_data(self, admin_client):
        data = {
            'first_name': 'First Name',
            'last_name': 'Last Name',
            'username': 'test_username',
            'bio': 'test bio',
            'role': 'moderator',
            'email': 'testmoder2@yamdb.fake'
        }
        response = admin_client.post('/api/v1/users/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/users/` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 403 == <HTTPStatus.CREATED: 201>
E         +403
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:234: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
______________ Test01UserAPI.test_05_04_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e250a00>
user_superuser_client = <rest_framework.test.APIClient object at 0x7fbe7e2d5b80>
django_user_model = <class 'users.models.ReviewUser'>

    def test_05_04_users_post_user_superuser(self, user_superuser_client,
                                             django_user_model):
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post(
            '/api/v1/users/', data=valid_data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос суперпользователя к `/api/v1/users/` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос суперпользователя к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 403 == <HTTPStatus.CREATED: 201>
E         +403
E         -<HTTPStatus.CREATED: 201>

tests/test_01_users.py:261: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e2230d0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e634190>
moderator = <ReviewUser: TestModerator>

    def test_06_users_username_get_admin(self, admin_client, moderator):
        response = admin_client.get(f'/api/v1/users/{moderator.username}/')
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            'Эндпоинт `/api/v1/users/{username}/` не найден. Проверьте '
            'настройки в *urls.py*.'
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос администратора к '
            '`/api/v1/users/{username}/` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос администратора к `/api/v1/users/{username}/` возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests/test_01_users.py:281: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestModerator/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e213e50>
user = <ReviewUser: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2cab20>
django_user_model = <class 'users.models.ReviewUser'>

    def test_07_01_users_username_patch_admin(self, user, admin_client,
                                              django_user_model):
        data = {
            'first_name': 'Admin',
            'last_name': 'Test',
            'bio': 'description'
        }
        response = admin_client.patch(
            f'/api/v1/users/{user.username}/', data=data
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Если PATCH-запрос администратора, отправленный к '
            '`/api/v1/users/{username}/`, содержит корректные данные - должен '
            'вернуться ответ со статусом 200.'
        )
E       AssertionError: Если PATCH-запрос администратора, отправленный к `/api/v1/users/{username}/`, содержит корректные данные - должен вернуться ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests/test_01_users.py:322: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestUser/
___________ Test01UserAPI.test_07_05_users_username_put_not_allowed ____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e1ce850>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2349a0>
user = <ReviewUser: TestUser>

    def test_07_05_users_username_put_not_allowed(self, admin_client, user):
        response = admin_client.put(
            f'/api/v1/users/{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            'Проверьте, что PUT-запрос к `/api/v1/users/{username}/` '
            'не предусмотрен и возвращает статус 405.'
        )
E       AssertionError: Проверьте, что PUT-запрос к `/api/v1/users/{username}/` не предусмотрен и возвращает статус 405.
E       assert 403 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +403
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests/test_01_users.py:405: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e211c10>
user = <ReviewUser: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e225280>
django_user_model = <class 'users.models.ReviewUser'>

    def test_08_01_users_username_delete_admin(self, user, admin_client,
                                               django_user_model):
        users_cnt = django_user_model.objects.count()
        response = admin_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            'Проверьте, что DELETE-запрос администратора к '
            '`/api/v1/users/{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос администратора к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 403 == <HTTPStatus.NO_CONTENT: 204>
E         +403
E         -<HTTPStatus.NO_CONTENT: 204>

tests/test_01_users.py:414: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestUser/
___________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e238730>
user_superuser_client = <rest_framework.test.APIClient object at 0x7fbe7e209d30>
user = <ReviewUser: TestUser>
django_user_model = <class 'users.models.ReviewUser'>

    def test_08_04_users_username_delete_superuser(self, user_superuser_client,
                                                   user, django_user_model):
        users_cnt = django_user_model.objects.count()
        response = user_superuser_client.delete(
            f'/api/v1/users/{user.username}/'
        )
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            'Проверьте, что DELETE-запрос суперпользователя к '
            '`/api/v1/users/{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос суперпользователя к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 403 == <HTTPStatus.NO_CONTENT: 204>
E         +403
E         -<HTTPStatus.NO_CONTENT: 204>

tests/test_01_users.py:455: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/TestUser/
______________________ Test01UserAPI.test_09_users_me_get ______________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e225c40>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e1fbca0>
user = <ReviewUser: TestUser>

    def test_09_users_me_get(self, user_client, user):
        response = user_client.get('/api/v1/users/me/')
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос обычного пользователя к '
            '`/api/v1/users/me/` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос обычного пользователя к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests/test_01_users.py:466: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
_____________ Test01UserAPI.test_09_02_users_me_delete_not_allowed _____________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e4d4d00>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e656190>
user = <ReviewUser: TestUser>
django_user_model = <class 'users.models.ReviewUser'>

    def test_09_02_users_me_delete_not_allowed(self, user_client, user,
                                               django_user_model):
        response = user_client.delete('/api/v1/users/me/')
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            'Проверьте, что DELETE-запрос к `/api/v1/users/me/` возвращает '
            'ответ со статусом 405.'
        )
E       AssertionError: Проверьте, что DELETE-запрос к `/api/v1/users/me/` возвращает ответ со статусом 405.
E       assert 403 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +403
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests/test_01_users.py:483: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
___________________ Test01UserAPI.test_10_01_users_me_patch ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e1cea30>
django_user_model = <class 'users.models.ReviewUser'>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e303820>
admin = <ReviewUser: TestAdmin>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e303310>
moderator = <ReviewUser: TestModerator>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e268310>
user = <ReviewUser: TestAdmin>

    def test_10_01_users_me_patch(self, django_user_model, admin_client,
                                  admin, moderator_client, moderator,
                                  user_client, user):
        data = {'bio': 'description'}
    
        for client, user in (
                (admin_client, admin),
                (moderator_client, moderator),
                (user_client, user)
        ):
            response = client.patch('/api/v1/users/me/', data=data)
>           assert response.status_code == HTTPStatus.OK, (
                'Проверьте, что PATCH-запрос к `/api/v1/users/me/` доступен '
                'пользователям всех ролей и возвращает ответ со статусом 200.'
            )
E           AssertionError: Проверьте, что PATCH-запрос к `/api/v1/users/me/` доступен пользователям всех ролей и возвращает ответ со статусом 200.
E           assert 403 == <HTTPStatus.OK: 200>
E             +403
E             -<HTTPStatus.OK: 200>

tests/test_01_users.py:506: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____ Test01UserAPI.test_10_02_users_me_has_field_validation[data0-messege0] ____

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e268790>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e234eb0>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        url = '/api/v1/users/me/'
        request_method = 'PATCH'
        response = user_client.patch(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(url=url, request_method=request_method)
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:526: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____ Test01UserAPI.test_10_02_users_me_has_field_validation[data1-messege1] ____

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e3229a0>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e225550>
data = {'email': 'valid-email@yamdb.fake', 'username': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        url = '/api/v1/users/me/'
        request_method = 'PATCH'
        response = user_client.patch(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(url=url, request_method=request_method)
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:526: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____ Test01UserAPI.test_10_02_users_me_has_field_validation[data2-messege2] ____

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e225370>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e213f10>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\z',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        url = '/api/v1/users/me/'
        request_method = 'PATCH'
        response = user_client.patch(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(url=url, request_method=request_method)
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\z
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:526: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____ Test01UserAPI.test_10_02_users_me_has_field_validation[data3-messege3] ____

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e238c70>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e234eb0>
data = {'email': 'valid-email@yamdb.fake', 'first_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        url = '/api/v1/users/me/'
        request_method = 'PATCH'
        response = user_client.patch(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(url=url, request_method=request_method)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/me/` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:526: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
____ Test01UserAPI.test_10_02_users_me_has_field_validation[data4-messege4] ____

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e225790>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e3031c0>
data = {'email': 'valid-email@yamdb.fake', 'last_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        url = '/api/v1/users/me/'
        request_method = 'PATCH'
        response = user_client.patch(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(url=url, request_method=request_method)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/me/` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_01_users.py:526: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
_______ Test01UserAPI.test_10_03_users_me_patch_change_role_not_allowed ________

self = <tests.test_01_users.Test01UserAPI object at 0x7fbe7e2504f0>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e25f190>
user = <ReviewUser: TestUser>
django_user_model = <class 'users.models.ReviewUser'>

    def test_10_03_users_me_patch_change_role_not_allowed(self,
                                                          user_client,
                                                          user,
                                                          django_user_model):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к '
            '`/api/v1/users/me/` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что PATCH-запрос пользователя с ролью `user` к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 403 == <HTTPStatus.OK: 200>
E         +403
E         -<HTTPStatus.OK: 200>

tests/test_01_users.py:540: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/users/me/
______________ Test02CategoryAPI.test_02_category_with_admin_user ______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e258b80>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e209100>

    def test_02_category_with_admin_user(self, admin_client):
        categories_count = 0
    
        url = '/api/v1/categories/'
        data = {}
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            f'Если POST-запрос администратора, отправленный к `{url}`, '
            'содержит некорректные данные - должен вернуться ответ со '
            'статусом 400.'
        )
E       AssertionError: Если POST-запрос администратора, отправленный к `/api/v1/categories/`, содержит некорректные данные - должен вернуться ответ со статусом 400.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_02_category.py:29: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
_____ Test02CategoryAPI.test_03_category_fields_validation[data0-massage0] _____

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e209820>
data = {'name': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasimbols', 'slug': 'longname'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `name`: название произведения не должно быть длиннее 256 символов.',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2236a0>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/categories/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/categories/` проверяется длина поля `name`: название произведения не должно быть длиннее 256 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_02_category.py:90: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
_____ Test02CategoryAPI.test_03_category_fields_validation[data1-massage1] _____

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e223e80>
data = {'name': 'longslug', 'slug': 'llllllllllllllllllllllllllllllllllllllllllllllllllsimbols'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `slug`: его содержимое не должно быть длиннее 50 символов.',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2e5040>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/categories/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/categories/` проверяется длина поля `slug`: его содержимое не должно быть длиннее 50 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_02_category.py:90: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
_____ Test02CategoryAPI.test_03_category_fields_validation[data2-massage2] _____

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e59fd90>
data = {'name': 'brokenslug', 'slug': ':-)'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` содержание поля `slug` проверяется на соответствие паттерну, указанному в спецификации: ^[-a-zA-Z0-9_]+$',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e258d90>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/categories/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/categories/` содержание поля `slug` проверяется на соответствие паттерну, указанному в спецификации: ^[-a-zA-Z0-9_]+$
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_02_category.py:90: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
_______________ Test02CategoryAPI.test_04_category_delete_admin ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e2d5610>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2e8e50>

    def test_04_category_delete_admin(self, admin_client):
>       category_1, category_2 = create_categories(admin_client)

tests/test_02_category.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2e8e50>

    def create_categories(admin_client):
        data1 = {
            'name': 'Фильм',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data1)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/categories/` '
            'содержит корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/categories/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:185: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
__________ Test02CategoryAPI.test_05_category_check_permission_admin ___________

self = <tests.test_02_category.Test02CategoryAPI object at 0x7fbe7e2eddc0>
client = <django.test.client.Client object at 0x7fbe7e616d00>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e6044c0>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e60df10>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e60d160>

    def test_05_category_check_permission_admin(self, client,
                                                user_client,
                                                moderator_client,
                                                admin_client):
>       categories = create_categories(admin_client)

tests/test_02_category.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e60d160>

    def create_categories(admin_client):
        data1 = {
            'name': 'Фильм',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data1)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/categories/` '
            'содержит корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/categories/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:185: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/categories/
_________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e5e71c0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e634670>
client = <django.test.client.Client object at 0x7fbe7e399e80>

    def test_02_genre(self, admin_client, client):
        genres_count = 0
        url = '/api/v1/genres/'
    
        data = {}
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            f'Если POST-запрос администратора к `{url}` '
            'содержит некорректные данные - должен вернуться ответ со '
            'статусом 400.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит некорректные данные - должен вернуться ответ со статусом 400.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_03_genre.py:29: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data0-massage0] _______

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e614190>
data = {'name': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasimbols', 'slug': 'longname'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `name`: название произведения не должно быть длиннее 256 символов.',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e250d30>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/genres/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/genres/` проверяется длина поля `name`: название произведения не должно быть длиннее 256 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_03_genre.py:80: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data1-massage1] _______

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e59fb50>
data = {'name': 'longslug', 'slug': 'llllllllllllllllllllllllllllllllllllllllllllllllllsimbols'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `slug`: его содержимое не должно быть длиннее 50 символов.',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e593b50>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/genres/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/genres/` проверяется длина поля `slug`: его содержимое не должно быть длиннее 50 символов.
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_03_genre.py:80: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data2-massage2] _______

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e593820>
data = {'name': 'brokenslug', 'slug': ':-)'}
massage = ('Проверьте, что при обработке POST-запроса к `{url}` содержание поля `slug` проверяется на соответствие паттерну, указанному в спецификации: ^[-a-zA-Z0-9_]+$',)
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e223610>

    @pytest.mark.parametrize('data,massage', check_name_and_slug_patterns)
    def test_03_category_fields_validation(self, data, massage, admin_client):
        url = '/api/v1/genres/'
        response = admin_client.post(url, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            massage[0].format(url=url)
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/genres/` содержание поля `slug` проверяется на соответствие паттерну, указанному в спецификации: ^[-a-zA-Z0-9_]+$
E       assert 403 == <HTTPStatus.BAD_REQUEST: 400>
E         +403
E         -<HTTPStatus.BAD_REQUEST: 400>

tests/test_03_genre.py:80: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_____________________ Test03GenreAPI.test_04_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e6e8bb0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e6045e0>

    def test_04_genres_delete(self, admin_client):
>       genres = create_genre(admin_client)

tests/test_03_genre.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e6045e0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
________________ Test03GenreAPI.test_05_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x7fbe7e6672b0>
client = <django.test.client.Client object at 0x7fbe7e614730>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e69fc10>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e6cbca0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2118b0>

    def test_05_genres_check_permission(self, client,
                                        user_client,
                                        moderator_client,
                                        admin_client):
>       genres = create_genre(admin_client)

tests/test_03_genre.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2118b0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
______________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7fbe7e181cd0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e13d100>
client = <django.test.client.Client object at 0x7fbe7e13de20>

    def test_02_title_admin(self, admin_client, client):
>       genres = create_genre(admin_client)

tests/test_04_title.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e13d100>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7fbe7e2118b0>
client = <django.test.client.Client object at 0x7fbe7e399d60>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e551670>

    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e551670>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_____________ Test04TitleAPI.test_04_titles_name_length_validation _____________

self = <tests.test_04_title.Test04TitleAPI object at 0x7fbe7e593160>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e62f6d0>

    def test_04_titles_name_length_validation(self, admin_client):
>       genres = create_genre(admin_client)

tests/test_04_title.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e62f6d0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
________________ Test04TitleAPI.test_05_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x7fbe7e6674f0>
client = <django.test.client.Client object at 0x7fbe7e2a0d90>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e2a0790>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e641a00>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e641dc0>

    def test_05_titles_check_permission(self, client, user_client,
                                        moderator_client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e641dc0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
___________________ Test05ReviewAPI.test_01_review_not_auth ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7fbe7e617f40>
client = <django.test.client.Client object at 0x7fbe7e119400>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e3997c0>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e2ca610>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e61c1f0>
moderator = <ReviewUser: TestModerator>

    def test_01_review_not_auth(self, client, admin_client, admin, user_client,
                                user, moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_05_review.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e3997c0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_____________________ Test05ReviewAPI.test_02_review_post ______________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7fbe7e119580>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e153a90>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e153ee0>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e284550>
admin = <ReviewUser: TestAdmin>

    def test_02_review_post(self, admin_client, user_client,
                            moderator_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests/test_05_review.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e153a90>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
__________________ Test05ReviewAPI.test_03_review_detail_get ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7fbe7e153ac0>
client = <django.test.client.Client object at 0x7fbe7e109430>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e109a60>
admin = <ReviewUser: TestAdmin>, user = <ReviewUser: TestUser>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e61c3a0>
moderator = <ReviewUser: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e1611f0>

    def test_03_review_detail_get(self, client, admin_client, admin, user,
                                  user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_05_review.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e109a60>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
__________________ Test05ReviewAPI.test_04_review_detail_user __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7fbe7e109be0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e122fd0>
admin = <ReviewUser: TestAdmin>, user = <ReviewUser: TestUser>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e122fa0>
moderator = <ReviewUser: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e551fa0>

    def test_04_review_detail_user(self, admin_client, admin, user,
                                   user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_05_review.py:257: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e122fd0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
__________ Test05ReviewAPI.test_05_reviews_detail_moderator_and_admin __________

self = <tests.test_05_review.Test05ReviewAPI object at 0x7fbe7e617d30>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e557790>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e649dc0>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e5516d0>
moderator = <ReviewUser: TestModerator>

    def test_05_reviews_detail_moderator_and_admin(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        url_template = '/api/v1/titles/{title_id}/reviews/{review_id}/'
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_05_review.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e557790>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
__________________ Test06CommentAPI.test_01_comment_not_auth ___________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e551a30>
client = <django.test.client.Client object at 0x7fbe7e109af0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e109700>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e2a03a0>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e2a0130>
moderator = <ReviewUser: TestModerator>

    def test_01_comment_not_auth(self, client, admin_client, admin,
                                 user_client, user, moderator_client,
                                 moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_06_comment.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e109700>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e2a06a0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e61c790>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e6140d0>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e0d41f0>
moderator = <ReviewUser: TestModerator>

    def test_02_comment(self, admin_client, admin, user_client, user,
                        moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests/test_06_comment.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e61c790>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_________________ Test06CommentAPI.test_03_comment_detail_get __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e60da90>
client = <django.test.client.Client object at 0x7fbe7e5b91c0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e59f580>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e59f0d0>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e557cd0>
moderator = <ReviewUser: TestModerator>

    def test_03_comment_detail_get(self, client, admin_client, admin,
                                   user_client, user, moderator_client,
                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests/test_06_comment.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:266: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e59f580>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
__________ Test06CommentAPI.test_04_comment_detail__user_patch_delete __________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e5c71c0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2d5ee0>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e119be0>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e1190a0>
moderator = <ReviewUser: TestModerator>

    def test_04_comment_detail__user_patch_delete(self, admin_client, admin,
                                                  user_client, user,
                                                  moderator_client,
                                                  moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests/test_06_comment.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:266: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2d5ee0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_________ Test06CommentAPI.test_05_comment_detail_admin_and_moderator __________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e2d53d0>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2846a0>
admin = <ReviewUser: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e6cba90>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e6cb370>
moderator = <ReviewUser: TestModerator>

    def test_05_comment_detail_admin_and_moderator(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests/test_06_comment.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:266: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e2846a0>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
_______________ Test06CommentAPI.test_06_comment_detail_not_auth _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x7fbe7e25fd60>
admin_client = <rest_framework.test.APIClient object at 0x7fbe7e160e50>
admin = <ReviewUser: TestAdmin>
client = <django.test.client.Client object at 0x7fbe7e160610>
user_client = <rest_framework.test.APIClient object at 0x7fbe7e160730>
user = <ReviewUser: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x7fbe7e62f5e0>
moderator = <ReviewUser: TestModerator>

    def test_06_comment_detail_not_auth(self, admin_client, admin, client,
                                        user_client, user, moderator_client,
                                        moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests/test_06_comment.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/utils.py:266: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests/utils.py:247: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests/utils.py:216: in create_titles
    genres = create_genre(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x7fbe7e160e50>

    def create_genre(admin_client):
        result = []
        data = {'name': 'Ужасы', 'slug': 'horror'}
        result.append(data)
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/genres/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/genres/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests/utils.py:202: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Forbidden: /api/v1/genres/
--------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=============================== warnings summary ===============================
venv/lib/python3.8/site-packages/django/apps/registry.py:91
  /home/ddd/Dev/api_yamdb/venv/lib/python3.8/site-packages/django/apps/registry.py:91: RemovedInDjango41Warning: 'verified_email_field' defines default_app_config = 'verified_email_field.apps.VerifiedEmailFieldConfig'. Django now detects this configuration automatically. You can remove default_app_config.
    app_config = AppConfig.create(entry)

tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
  /home/ddd/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
  /home/ddd/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth
  /home/ddd/Dev/api_yamdb/venv/lib/python3.8/site-packages/rest_framework/pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Title'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data
FAILED tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_me_get - Assertio...
FAILED tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed
FAILED tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch - Ass...
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0]
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1]
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2]
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - AssertionError...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0]
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1]
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2]
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - Assert...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation
FAILED tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - As...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_post - Assert...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get - ...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user
FAILED tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - Assertio...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete
FAILED tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator
FAILED tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth
================== 61 failed, 16 passed, 4 warnings in 14.27s ==================
